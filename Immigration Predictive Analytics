{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib as matplot\n",
    "\n",
    "import re\n",
    "import sklearn\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# from tensorflow.python.client import device_lib\n",
    "# print(device_lib.list_local_devices())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('clean_H1B_data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PREVAILING_WAGE</th>\n",
       "      <th>cluster_job_title</th>\n",
       "      <th>CASE_STATUS_code</th>\n",
       "      <th>EMPLOYER_NAME_code</th>\n",
       "      <th>FULL_TIME_POSITION_code</th>\n",
       "      <th>YEAR_code</th>\n",
       "      <th>SOC_NAME1_code</th>\n",
       "      <th>state_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36067.0</td>\n",
       "      <td>18</td>\n",
       "      <td>1</td>\n",
       "      <td>915</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>91021.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>105914.0</td>\n",
       "      <td>13</td>\n",
       "      <td>1</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90834.0</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>117998.0</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PREVAILING_WAGE  cluster_job_title  CASE_STATUS_code  EMPLOYER_NAME_code  \\\n",
       "0          36067.0                 18                 1                 915   \n",
       "1          91021.0                  8                 1                 621   \n",
       "2         105914.0                 13                 1                 621   \n",
       "3          90834.0                 12                 1                 621   \n",
       "4         117998.0                  8                 1                 621   \n",
       "\n",
       "   FULL_TIME_POSITION_code  YEAR_code  SOC_NAME1_code  state_code  \n",
       "0                        0          5              13          22  \n",
       "1                        1          5              13          45  \n",
       "2                        1          5              13           5  \n",
       "3                        1          5              13          51  \n",
       "4                        1          5              13           4  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.CASE_STATUS_code = df.CASE_STATUS_code.replace(1,\"denied\")\n",
    "df.CASE_STATUS_code = df.CASE_STATUS_code.replace(0,\"certified\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.CASE_STATUS_code = df.CASE_STATUS_code.replace(\"denied\",0)\n",
    "df.CASE_STATUS_code = df.CASE_STATUS_code.replace(\"certified\",1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2799076 entries, 0 to 2799075\n",
      "Data columns (total 8 columns):\n",
      " #   Column                   Dtype  \n",
      "---  ------                   -----  \n",
      " 0   PREVAILING_WAGE          float64\n",
      " 1   cluster_job_title        int64  \n",
      " 2   CASE_STATUS_code         int64  \n",
      " 3   EMPLOYER_NAME_code       int64  \n",
      " 4   FULL_TIME_POSITION_code  int64  \n",
      " 5   YEAR_code                int64  \n",
      " 6   SOC_NAME1_code           int64  \n",
      " 7   state_code               int64  \n",
      "dtypes: float64(1), int64(7)\n",
      "memory usage: 170.8 MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2799076 entries, 0 to 2799075\n",
      "Data columns (total 8 columns):\n",
      " #   Column                   Dtype  \n",
      "---  ------                   -----  \n",
      " 0   PREVAILING_WAGE          float64\n",
      " 1   cluster_job_title        int64  \n",
      " 2   CASE_STATUS_code         int64  \n",
      " 3   EMPLOYER_NAME_code       int64  \n",
      " 4   FULL_TIME_POSITION_code  int64  \n",
      " 5   YEAR_code                int64  \n",
      " 6   SOC_NAME1_code           int64  \n",
      " 7   state_code               int64  \n",
      "dtypes: float64(1), int64(7)\n",
      "memory usage: 170.8 MB\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PREVAILING_WAGE</th>\n",
       "      <th>cluster_job_title</th>\n",
       "      <th>EMPLOYER_NAME_code</th>\n",
       "      <th>FULL_TIME_POSITION_code</th>\n",
       "      <th>YEAR_code</th>\n",
       "      <th>SOC_NAME1_code</th>\n",
       "      <th>state_code</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>36067.0</td>\n",
       "      <td>18</td>\n",
       "      <td>915</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>22</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>91021.0</td>\n",
       "      <td>8</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>105914.0</td>\n",
       "      <td>13</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>90834.0</td>\n",
       "      <td>12</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>51</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>117998.0</td>\n",
       "      <td>8</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>13</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PREVAILING_WAGE  cluster_job_title  EMPLOYER_NAME_code  \\\n",
       "0          36067.0                 18                 915   \n",
       "1          91021.0                  8                 621   \n",
       "2         105914.0                 13                 621   \n",
       "3          90834.0                 12                 621   \n",
       "4         117998.0                  8                 621   \n",
       "\n",
       "   FULL_TIME_POSITION_code  YEAR_code  SOC_NAME1_code  state_code  label  \n",
       "0                        0          5              13          22      1  \n",
       "1                        1          5              13          45      1  \n",
       "2                        1          5              13           5      1  \n",
       "3                        1          5              13          51      1  \n",
       "4                        1          5              13           4      1  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "#Splitting data, model training and evaluation process\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "# Importing Classifier Modules\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import Perceptron\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "import os\n",
    "\n",
    "\n",
    "\n",
    "new_df = pd.DataFrame()\n",
    "new_df = df.copy()\n",
    "new_df\n",
    "\n",
    "\n",
    "new_df.head()\n",
    "\n",
    "new_df.shape\n",
    "\n",
    "new_df.info()\n",
    "\n",
    "new_df = new_df.drop(\"CASE_STATUS_code\", axis=1)\n",
    "\n",
    "new_df[\"label\"] = df[\"CASE_STATUS_code\"]\n",
    "\n",
    "new_df.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "# Importing Classifier Modules\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.svm import SVC, LinearSVC\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.linear_model import Perceptron\n",
    "from sklearn.linear_model import SGDClassifier\n",
    "from sklearn.ensemble import GradientBoostingClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import xgboost as xgb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train labels:\n",
      "1703598    1\n",
      "95173      1\n",
      "1947019    1\n",
      "891957     1\n",
      "2220245    1\n",
      "          ..\n",
      "1692743    1\n",
      "2356330    1\n",
      "2229084    0\n",
      "2768307    1\n",
      "2219110    1\n",
      "Name: label, Length: 1959353, dtype: int64\n",
      "Test labels:\n",
      "2670282    1\n",
      "2145644    1\n",
      "2750608    1\n",
      "102973     1\n",
      "2515594    1\n",
      "          ..\n",
      "2483187    1\n",
      "2039576    1\n",
      "850905     1\n",
      "1459168    1\n",
      "2260276    1\n",
      "Name: label, Length: 839723, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#Split training and testing dataset\n",
    "\n",
    "\n",
    "y = new_df[\"label\"]\n",
    "x = new_df.iloc[:,0:5]\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, \n",
    "                                                    train_size=0.7, \n",
    "                                                    random_state=42)\n",
    "\n",
    "print(f\"Train labels:\\n{y_train}\")\n",
    "print(f\"Test labels:\\n{y_test}\")\n",
    "\n",
    "df_a = x_train\n",
    "df_b = y_train\n",
    "\n",
    "training_data = pd.concat([df_a,df_b],axis = 1, join = \"inner\")\n",
    "\n",
    "training_data\n",
    "\n",
    "testing_data = pd.concat([x_test,y_test], axis = 1, join = \"inner\")\n",
    "\n",
    "testing_data\n",
    "\n",
    "training_data.to_csv(\"C:/Users/zny_1/Desktop/training data.csv\", index = False)\n",
    "testing_data.to_csv(\"C:/Users/zny_1/Desktop/final holdout data.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0], dtype=int64)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "training_data[\"label\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#reload training data\n",
    "\n",
    "train_df=pd.read_csv('C:/Users/14264/Desktop/training data.csv')    \n",
    "train_df.head()\n",
    "\n",
    "train_df.shape\n",
    "\n",
    "#new_train_df = train_df.copy()\n",
    "nt_df = train_df.copy()\n",
    "\n",
    "# split training and testing data in the training set for model training process\n",
    "Y = nt_df[\"label\"]\n",
    "X = nt_df.iloc[:,0:5]\n",
    "\n",
    "train_x, test_x, train_y, test_y = train_test_split(X, Y, \n",
    "                                                    train_size=0.7, \n",
    "                                                    random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from imblearn.over_sampling import SMOTE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Dealing with unbalanced dataset problem\n",
    "\n",
    "oversample = SMOTE()\n",
    "new_train_x, new_train_y = oversample.fit_resample(train_x, train_y)\n",
    "\n",
    "plot_status_numberinit = new_train_y.value_counts().plot(title = 'CASE STATUS vs NUMBER OF PETITIONS', \\\n",
    "                                                                kind = 'barh', color = 'green')\n",
    "plot_status_numberinit.set_xlabel(\"CASE STATUS\")\n",
    "plot_status_numberinit.set_ylabel(\"NUMBER OF PETITIONS\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import plot_roc_curve\n",
    "from sklearn.metrics import roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Training models\n",
    "\n",
    "def fit_model (model):\n",
    "    classifier = model()  #train with default model parameters\n",
    "    classifier.fit(new_train_x, new_train_y)\n",
    "    print(\"training accuracy is:\",classifier.score(new_train_x, new_train_y))\n",
    "    print(\"testing accuracy is:\",classifier.score(test_x, test_y))   \n",
    "    return classifier\n",
    "    \n",
    "# the fit_model function will return the mean accuracy of given test data and labels\n",
    "\n",
    "# calculate precision, recall, fscore, and support score for the model\n",
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "\n",
    "def prfs (trained_model):\n",
    "    pred_label = trained_model.predict(test_x)\n",
    "    print(\"When positive class refers to \\\"running\\\", the precision, recall, f_measure and support for the model is :\",\n",
    "          precision_recall_fscore_support(test_y, pred_label, average = \"binary\"))\n",
    "\n",
    "    \n",
    "\n",
    "# Calculate the roc graph and auc score on parameters, but how to overlap the results from different models?\n",
    "def roc_auc(trained_model):\n",
    "    plot_roc_curve(trained_model, test_x, test_y)\n",
    "    roc_auc_score(test_y,trained_model.predict(test_x))\n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "# cross validation\n",
    "# roc curve put them together\n",
    "# look at before final projects\n",
    "# understand each algorithms"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#calculate the cross validation to train better models\n",
    "from sklearn.model_selection import cross_val_score, cross_validate\n",
    "from sklearn.model_selection import RepeatedKFold\n",
    "import statistics\n",
    "\n",
    "#scores: evaluate model with mean accuracy score across multiple splits of training dataset\n",
    "def cv (trained_model):\n",
    "    cv = RepeatedKFold(n_splits = 10, n_repeats = 5, random_state = 345256)   #create the cross_validation proces\n",
    "    scores = cross_val_score(trained_model, new_train_x, new_train_y, scoring = \"accuracy\", cv = cv, n_jobs = -1)\n",
    "    # result = cross_validate(trained_model)\n",
    "    print(\"Accuracy: %.3f (%.3f)\" % (np.mean(scores), np.std(scores)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import RandomizedSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.9489150117635725\n",
      "testing accuracy is: 0.8660068117712306\n"
     ]
    }
   ],
   "source": [
    "#decision tree\n",
    "dt1 = fit_model(DecisionTreeClassifier)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.904 (0.001)\n"
     ]
    }
   ],
   "source": [
    "cv(dt1)   #cv accuracy is slightly lower than training accuracy, but almost the same , so no obvious overfitting problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When positive class refers to \"running\", the precision, recall, f_measure and support for the model is : (0.9770113377802844, 0.8824214427484939, 0.9273104823079905, None)\n"
     ]
    }
   ],
   "source": [
    "prfs(dt1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "roc_auc(dt1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.9488762514318744\n",
      "testing accuracy is: 0.8725667992500927\n"
     ]
    }
   ],
   "source": [
    "#random forest\n",
    "rf1 = fit_model(RandomForestClassifier)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.907 (0.001)\n"
     ]
    }
   ],
   "source": [
    "cv(rf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When positive class refers to \"running\", the precision, recall, f_measure and support for the model is : (0.9767922235722964, 0.8895666836456888, 0.9311411814454598, None)\n"
     ]
    }
   ],
   "source": [
    "prfs(rf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "roc_auc(rf1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.5861864198850286\n",
      "testing accuracy is: 0.5322946686491802\n"
     ]
    }
   ],
   "source": [
    "#logistic regression\n",
    "\n",
    "lr1 = fit_model(LogisticRegression)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.7192178992953898\n",
      "testing accuracy is: 0.6653079417358788\n"
     ]
    }
   ],
   "source": [
    "#naive baysian classifier:\n",
    "nb1= fit_model(GaussianNB)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.7714367213124624\n",
      "testing accuracy is: 0.7640258860916697\n"
     ]
    }
   ],
   "source": [
    "#gradient boosting model\n",
    "gb1 = fit_model(GradientBoostingClassifier)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "When positive class refers to \"running\", the precision, recall, f_measure and support for the model is : (0.9837840995647749, 0.7690443152477473, 0.8632602744317504, None)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "prfs(gb1)\n",
    "roc_auc(gb1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.771 (0.001)\n"
     ]
    }
   ],
   "source": [
    "cv(gb1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.5899845560775447\n",
      "testing accuracy is: 0.9159756790505711\n"
     ]
    }
   ],
   "source": [
    "#stochastic gradient decient model\n",
    "sgd1 = fit_model(SGDClassifier)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training accuracy is: 0.5000003763138999\n",
      "testing accuracy is: 0.031432139175170036\n"
     ]
    }
   ],
   "source": [
    "#perceptron classifier\n",
    "perceptron1 = fit_model(Perceptron)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Feature: 0, Score: 0.47001\n",
      "Feature: 1, Score: 0.09468\n",
      "Feature: 2, Score: 0.20268\n",
      "Feature: 3, Score: 0.04883\n",
      "Feature: 4, Score: 0.18381\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.ensemble import RandomForestClassifier\n",
    "model = RandomForestClassifier()\n",
    "from matplotlib import pyplot\n",
    "# fit the model\n",
    "model.fit(new_train_x, new_train_y)\n",
    "# get importance\n",
    "importance = model.feature_importances_\n",
    "# summarize feature importance\n",
    "for i,v in enumerate(importance):\n",
    "\tprint('Feature: %0d, Score: %.5f' % (i,v))\n",
    "# plot feature importance\n",
    "pyplot.bar([x for x in range(len(importance))], importance)\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_df=pd.read_csv('final holdout data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PREVAILING_WAGE</th>\n",
       "      <th>cluster_job_title</th>\n",
       "      <th>EMPLOYER_NAME_code</th>\n",
       "      <th>FULL_TIME_POSITION_code</th>\n",
       "      <th>YEAR_code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>84344.0</td>\n",
       "      <td>1</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>66955.0</td>\n",
       "      <td>4</td>\n",
       "      <td>24</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>83178.0</td>\n",
       "      <td>6</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>45864.0</td>\n",
       "      <td>10</td>\n",
       "      <td>19</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>105123.0</td>\n",
       "      <td>1</td>\n",
       "      <td>538</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839718</th>\n",
       "      <td>80600.0</td>\n",
       "      <td>8</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839719</th>\n",
       "      <td>97136.0</td>\n",
       "      <td>8</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839720</th>\n",
       "      <td>66726.4</td>\n",
       "      <td>9</td>\n",
       "      <td>621</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839721</th>\n",
       "      <td>77626.0</td>\n",
       "      <td>10</td>\n",
       "      <td>68</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839722</th>\n",
       "      <td>76003.0</td>\n",
       "      <td>4</td>\n",
       "      <td>58</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>839723 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        PREVAILING_WAGE  cluster_job_title  EMPLOYER_NAME_code  \\\n",
       "0               84344.0                  1                 621   \n",
       "1               66955.0                  4                  24   \n",
       "2               83178.0                  6                 621   \n",
       "3               45864.0                 10                  19   \n",
       "4              105123.0                  1                 538   \n",
       "...                 ...                ...                 ...   \n",
       "839718          80600.0                  8                 621   \n",
       "839719          97136.0                  8                 621   \n",
       "839720          66726.4                  9                 621   \n",
       "839721          77626.0                 10                  68   \n",
       "839722          76003.0                  4                  58   \n",
       "\n",
       "        FULL_TIME_POSITION_code  YEAR_code  \n",
       "0                             1          0  \n",
       "1                             1          1  \n",
       "2                             1          0  \n",
       "3                             0          5  \n",
       "4                             1          0  \n",
       "...                         ...        ...  \n",
       "839718                        1          0  \n",
       "839719                        1          2  \n",
       "839720                        1          4  \n",
       "839721                        1          3  \n",
       "839722                        1          1  \n",
       "\n",
       "[839723 rows x 5 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_testnew = test_df.iloc[:,0:5]\n",
    "X_testnew"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = model.predict(X_testnew)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 1 0 ... 0 1 1]\n"
     ]
    }
   ],
   "source": [
    "print(y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict = pd.DataFrame({\"pred\" : y_pred})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>pred</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839718</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839719</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839720</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839721</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>839722</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>839723 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        pred\n",
       "0          1\n",
       "1          1\n",
       "2          0\n",
       "3          1\n",
       "4          1\n",
       "...      ...\n",
       "839718     0\n",
       "839719     0\n",
       "839720     0\n",
       "839721     1\n",
       "839722     1\n",
       "\n",
       "[839723 rows x 1 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "predict.to_csv(\"predict result.csv\", index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         1\n",
       "1         1\n",
       "2         1\n",
       "3         1\n",
       "4         1\n",
       "         ..\n",
       "839718    1\n",
       "839719    1\n",
       "839720    1\n",
       "839721    1\n",
       "839722    1\n",
       "Name: label, Length: 839723, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testresult.label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         1\n",
       "1         1\n",
       "2         0\n",
       "3         1\n",
       "4         1\n",
       "         ..\n",
       "839718    0\n",
       "839719    0\n",
       "839720    0\n",
       "839721    1\n",
       "839722    1\n",
       "Name: pred, Length: 839723, dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "testresult.pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
